inherit = F,
size = I(1),
color = ~sound,
#   colors = col.cats,
# stroke = ~sound,
#  strokes = col.cats,
# symbol = ~block,
frame = ~modelType,
x = ~x, y = ~y, z = ~z,
opacity = .2, showlegend = FALSE) %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz,aspectmode='cube'),
title = "Posterior prediction for Flemish-accented Swedish\nNative model and Non-native model") # This line specifies the axis range
plot_ly(data = data.both %>%
filter(native_language == "Swedish") %>%
filter(model == Sound),
x= ~rvowel,
y= ~rclosure,
z= ~rburst,
color= ~posterior,
#  colors = "YlOrRd",
#  colorscale= list(c(0,1), "Viridis"),
symbol= ~Sound,
symbols = c('circle','square'),
frame= ~training_model,
type="scatter3d", mode="markers") %>%
add_trace(type = 'scatter3d', # plot 3d ellipsoid for exposure /d/
data = d.model.parameter.swedish %>%
mutate(training_model = ifelse(modelType == "TS", "non-native", "native")) %>%
droplevels(),
inherit = F,
size = I(1),
color = ~sound,
frame = ~training_model,
x = ~x, y = ~y, z = ~z,
opacity = .2, showlegend = FALSE) %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz,aspectmode='cube'),
title = "Posterior prediction for Flemish-accented Swedish\nNative model and Non-native model") # This line specifies the axis range
plot_ly(data = data.both %>%
filter(native_language == "English") %>%
filter(model == Sound),
x= ~rvowel,
y= ~rclosure,
z= ~rburst,
color= ~posterior,
#  colors = "YlOrRd",
#  colorscale= list(c(0,1), "Viridis"),
symbol= ~Sound,
symbols = c('circle','square'),
frame= ~training_model,
type="scatter3d", mode="markers") %>%
add_trace(type = 'scatter3d', # plot 3d ellipsoid for exposure /d/
data = d.model.parameter.english %>%
mutate(training_model = ifelse(modelType == "TS", "non-native", "native")) %>%
droplevels(.),
inherit = F,
size = I(1),
#  marker = list(color = ~sound, colors = c('#FFE1A1', '#683531'), showscale = F),
color = ~sound,
frame = ~training_model,
x = ~x, y = ~y, z = ~z,
opacity = .2) %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz,
aspectmode='cube'),
title = "Posterior prediction for Mandarin-accented English\nNative model and Non-native model") # This line specifies the axis range
common_cols <- intersect(colnames(data.swedish), colnames(data.english))
data.both <- rbind(extract_columns(data.swedish), extract_columns(data.english)) # there are a total of 180 words across the two datasets; each word has 2 modelType (TS or native) and 2 category_model (d or t)
colnames(data.both) = common_cols
data.both <- as.data.frame(data.both) %>%
mutate(Word = ifelse(MinimalPairID == 15 & Word == "nod", "nod15", as.character(Word))) %>% # the Swedish dataset has two words that are spelled the same but are different words
mutate(training_model = ifelse(modelType == "TS", "non-native", "native"),
Sound = factor(sound, levels = c("d", "t")),
sound = NULL)
View(data.both)
View(d.swedish)
# check differences in predicted results in a 3d space
diff.results.swedish <- data.swedish %>%
ungroup() %>%
# get_accuracy('sound', method=acc_method) %>%
filter(sound == model) %>%
#  mutate(log_posterior = qlogis(posterior)) %>%
#  dplyr::select(c(filename, word, sound,log_posterior, modelType, rvowel:rburst)) %>%
dplyr::select(c(filename, word, sound, posterior, modelType, rvowel:rburst)) %>%
dplyr::mutate(modelType = ifelse(modelType == "native Swedish", "native", modelType)) %>%
#  tidyr::spread(modelType, log_posterior) %>%
tidyr::spread(modelType, posterior) %>%
dplyr::mutate(TS_over_native = TS - native)
diff.results.english <- data.english %>%
filter(sound == model) %>%
ungroup() %>%
dplyr::select(c(word, sound, posterior, modelType, rvowel:rburst)) %>%
dplyr::mutate(modelType = ifelse(modelType == "native English", "native", modelType)) %>%
tidyr::spread(modelType, posterior) %>%
dplyr::mutate(TS_over_native = TS - native)
p.3d.diff.swedish = plot_ly(data = diff.results.swedish %>%
mutate(min = min(TS_over_native), max = max(TS_over_native), mean = mean(TS_over_native)) %>%
mutate(NonNative_over_Native = TS_over_native),
x= ~rvowel,
y= ~rclosure,
z= ~rburst,
# color= ~NonNative_over_Native,
marker = list(color = ~NonNative_over_Native, colorscale = 'RdBu', cmin = -1, cmax = 1, showscale = T),
# colors = 'RdBu',
symbol= ~sound,
symbols = c('circle','square'),
#  frame= ~modelType,
type="scatter3d", mode="markers", showlegend = FALSE) %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz,aspectmode='cube'),
title = "Posterior prediction for Flemish-accented Swedish\nDifferences between native model and non-native model \n(NonNative-Native)") # This line specifies the axis range
p.3d.diff.english = plot_ly(data = diff.results.english %>%
mutate(min = min(TS_over_native), max = max(TS_over_native), mean = mean(TS_over_native)) %>%
mutate(NonNative_over_Native = TS_over_native),
x= ~rvowel,
y= ~rclosure,
z= ~rburst,
# color= ~NonNative_over_Native,
marker = list(color = ~NonNative_over_Native, colorscale = 'RdBu', cmin = -1, cmax = 1, showscale = T),
# colors = 'RdBu',
symbol= ~sound,
symbols = c('circle','square'),
#  frame= ~modelType,
type="scatter3d", mode="markers", showlegend = FALSE) %>%
layout(scene = list(xaxis=axx,yaxis=axy,zaxis=axz,aspectmode='cube'),
title = "Posterior prediction for Mandarin-accented English\nDifferences between native model and non-native model \n(NonNative-Native)") # This line specifies the axis range
p.3d.diff.swedish
p.3d.diff.english
p.IO = ggplot(data = data.both,
aes(x=sound, y = accuracy, color = training_model, fill = training_model)) +
geom_bar(aes(y=accuracy),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
# coord_cartesian(ylim=c(0.4, 1)) +
geom_errorbar(aes(y=accuracy), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle(paste("Model predictions\nPredicted accuracy for accented speech")) +
#guides(fill = FALSE) +
geom_hline(yintercept = 1/2)
p.human = ggplot(data = d.test.all.rating %>%
mutate(Group = factor(Group, levels = c("control", "experimental"))) %>%
group_by(dataset, Group, sound, participant) %>%
summarise(meanRating_d = mean(zrating.simplified_d)),
aes(x= sound, y = meanRating_d, color = Group, fill = Group)) +
geom_bar(aes(y=meanRating_d),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
geom_errorbar(aes(y=meanRating_d), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(breaks = c("control", "experimental"), labels = c("control", "/d/-exposure"), values = c("black", "black")) +
scale_fill_manual(breaks = c("control", "experimental"), labels = c("control", "/d/-exposure"), values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle("Human responses\nMean /d/ goodness from rating task (transformed)")
p.human = ggplot(data = d.test.all.rating %>%
mutate(Group = factor(Group, levels = c("control", "experimental"))) %>%
group_by(dataset, Group, Sound, participant) %>%
summarise(meanRating_d = mean(zrating.simplified_d)),
aes(x= sound, y = meanRating_d, color = Group, fill = Group)) +
geom_bar(aes(y=meanRating_d),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
geom_errorbar(aes(y=meanRating_d), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(breaks = c("control", "experimental"), labels = c("control", "/d/-exposure"), values = c("black", "black")) +
scale_fill_manual(breaks = c("control", "experimental"), labels = c("control", "/d/-exposure"), values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle("Human responses\nMean /d/ goodness from rating task (transformed)")
p.human = ggplot(data = d.test.all.rating %>%
mutate(Group = factor(Group, levels = c("control", "experimental"))) %>%
group_by(dataset, Group, Sound, Participant) %>%
summarise(meanRating_d = mean(zrating.simplified_d)),
aes(x= sound, y = meanRating_d, color = Group, fill = Group)) +
geom_bar(aes(y=meanRating_d),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
geom_errorbar(aes(y=meanRating_d), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(breaks = c("control", "experimental"), labels = c("control", "/d/-exposure"), values = c("black", "black")) +
scale_fill_manual(breaks = c("control", "experimental"), labels = c("control", "/d/-exposure"), values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle("Human responses\nMean /d/ goodness from rating task (transformed)")
grid.arrange(p.IO, p.human, nrow = 1)
p.human = ggplot(data = d.test.all.rating %>%
mutate(Group = factor(Group, levels = c("control", "/d/-exposure"))) %>%
group_by(dataset, Group, Sound, Participant) %>%
summarise(meanRating_d = mean(zrating.simplified_d)),
aes(x= sound, y = meanRating_d, color = Group, fill = Group)) +
geom_bar(aes(y=meanRating_d),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
geom_errorbar(aes(y=meanRating_d), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(breaks = c("control", "/d/-exposure"), labels = c("control", "/d/-exposure"), values = c("black", "black")) +
scale_fill_manual(breaks = c("control", "/d/-exposure"), labels = c("control", "/d/-exposure"), values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle("Human responses\nMean /d/ goodness from rating task (transformed)")
grid.arrange(p.IO, p.human, nrow = 1)
ggplot(data = data.both,
aes(x=sound, y = accuracy, color = training_model, fill = training_model)) +
geom_bar(aes(y=accuracy),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
# coord_cartesian(ylim=c(0.4, 1)) +
geom_errorbar(aes(y=accuracy), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle(paste("Model predictions\nPredicted accuracy for accented speech")) +
#guides(fill = FALSE) +
geom_hline(yintercept = 1/2)
View(data.both)
data.both <- as.data.frame(data.both) %>%
mutate(training_model = ifelse(modelType == "TS", "non-native", "native"),
Sound = factor(sound, levels = c("d", "t")),
sound = NULL)
ggplot(data = data.both,
aes(x=sound, y = accuracy, color = training_model, fill = training_model)) +
geom_bar(aes(y=accuracy),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
# coord_cartesian(ylim=c(0.4, 1)) +
geom_errorbar(aes(y=accuracy), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle(paste("Model predictions\nPredicted accuracy for accented speech")) +
#guides(fill = FALSE) +
geom_hline(yintercept = 1/2)
ggplot(data = data.both,
aes(x=Sound, y = accuracy, color = training_model, fill = training_model)) +
geom_bar(aes(y=accuracy),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
# coord_cartesian(ylim=c(0.4, 1)) +
geom_errorbar(aes(y=accuracy), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle(paste("Model predictions\nPredicted accuracy for accented speech")) +
#guides(fill = FALSE) +
geom_hline(yintercept = 1/2)
ggplot(data = data.both %>%
filter(model == Sound),
aes(x=Sound, y = accuracy, color = training_model, fill = training_model)) +
geom_bar(aes(y=accuracy),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
# coord_cartesian(ylim=c(0.4, 1)) +
geom_errorbar(aes(y=accuracy), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle(paste("Model predictions\nPredicted accuracy for accented speech")) +
#guides(fill = FALSE) +
geom_hline(yintercept = 1/2)
p.IO = ggplot(data = data.both %>%
filter(model == Sound),
aes(x=Sound, y = accuracy, color = training_model, fill = training_model)) +
geom_bar(aes(y=accuracy),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
# coord_cartesian(ylim=c(0.4, 1)) +
geom_errorbar(aes(y=accuracy), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(values = c("black", "black")) +
scale_fill_manual(values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle(paste("Model predictions\nPredicted accuracy for accented speech")) +
#guides(fill = FALSE) +
geom_hline(yintercept = 1/2)
p.human = ggplot(data = d.test.all.rating %>%
mutate(Group = factor(Group, levels = c("control", "/d/-exposure"))) %>%
group_by(dataset, Group, Sound, Participant) %>%
summarise(meanRating_d = mean(zrating.simplified_d)),
aes(x= sound, y = meanRating_d, color = Group, fill = Group)) +
geom_bar(aes(y=meanRating_d),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
geom_errorbar(aes(y=meanRating_d), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(breaks = c("control", "/d/-exposure"), labels = c("control", "/d/-exposure"), values = c("black", "black")) +
scale_fill_manual(breaks = c("control", "/d/-exposure"), labels = c("control", "/d/-exposure"), values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle("Human responses\nMean /d/ goodness from rating task (transformed)")
grid.arrange(p.IO, p.human, nrow = 1)
p.human = ggplot(data = d.test.all.rating %>%
mutate(Group = factor(Group, levels = c("control", "/d/-exposure"))) %>%
group_by(dataset, Group, Sound, Participant) %>%
summarise(meanRating_d = mean(zrating.simplified_d)),
aes(x= Sound, y = meanRating_d, color = Group, fill = Group)) +
geom_bar(aes(y=meanRating_d),stat = "summary", fun.y = mean, position=position_dodge(0.7), width = 0.7) +
geom_errorbar(aes(y=meanRating_d), stat = "summary", fun.data = "mean_cl_boot",size = 0.5,position=position_dodge(0.7), width=0.1) +
scale_color_manual(breaks = c("control", "/d/-exposure"), labels = c("control", "/d/-exposure"), values = c("black", "black")) +
scale_fill_manual(breaks = c("control", "/d/-exposure"), labels = c("control", "/d/-exposure"), values = c("black", "white")) +
facet_grid(~dataset) +
# facet_grid(cues~., labeller = "label_both") +
ggtitle("Human responses\nMean /d/ goodness from rating task (transformed)")
grid.arrange(p.IO, p.human, nrow = 1)
View(d.test.all)
d.test.all <- d.test.all %>%
mutate(modelType = ifelse(modelType == "TS", "non-native", "native")) %>%
mutate(consistence = case_when(
Group == "control" & modelType == "native" ~"yes",
Group == "control" & modelType == "non-native" ~"no",
Group == "experimental" & modelType == "non-native" ~"yes",
Group == "experimental" & modelType == "native" ~"no",
))
d.test.all <- d.test.all %>%
mutate(modelType = ifelse(modelType == "TS", "non-native", "native")) %>%
mutate(consistence = case_when(
Group == "control" & modelType == "native" ~"yes",
Group == "control" & modelType == "non-native" ~"no",
Group == "/d-exposure" & modelType == "non-native" ~"yes",
Group == "/d-exposure" & modelType == "native" ~"no",
))
xtabs(~consistence + native_language + Group + modelType, d.test.all)
d.test.all <- d.test.all %>%
mutate(modelType = ifelse(modelType == "TS", "non-native", "native")) %>%
mutate(consistence = case_when(
Group == "control" & modelType == "native" ~"yes",
Group == "control" & modelType == "non-native" ~"no",
Group == "/d/-exposure" & modelType == "non-native" ~"yes",
Group == "/d/-exposure" & modelType == "native" ~"no",
))
xtabs(~consistence + native_language + Group + modelType, d.test.all)
xtabs(~consistence + Group + modelType, d.test.all)
d.test.all <- rbind(extract_columns(d.test.english), extract_columns(d.test.swedish))
colnames(d.test.all) = common_cols
common_cols <- intersect(colnames(d.test.swedish), colnames(d.test.english))
d.test.all <- rbind(extract_columns(d.test.english), extract_columns(d.test.swedish))
colnames(d.test.all) = common_cols
d.test.all <- as.data.frame(d.test.all) %>%
mutate(Participant = case_when(
native_language == "English" ~ 1000 + as.numeric(Participant),
native_language == "Swedish" ~ 2000 + as.numeric(Participant),
)) %>%
mutate_if(is.character,as.factor) %>%
mutate(Group = factor(Group, levels = c("/d/-exposure", "control")))
View(d.test.all)
# there are 4 common words between the two datasets, rename them so that they are identified as different words
d.test.all <- d.test.all %>%
mutate(Word = ifelse(Word %in% intersect(levels(factor(d.test.swedish$Word)), levels(factor(d.test.english$Word))), paste(Word, native_language, sep = "_"), as.character(Word))) %>%
mutate(Word = as.factor(Word))
str(d.test.all)
d.test.all <- d.test.all %>%
mutate(modelType = ifelse(modelType == "TS", "non-native", "native")) %>%
mutate(consistence = case_when(
Group == "control" & modelType == "native" ~"yes",
Group == "control" & modelType == "non-native" ~"no",
Group == "/d/-exposure" & modelType == "non-native" ~"yes",
Group == "/d/-exposure" & modelType == "native" ~"no",
))
xtabs(~consistence + Group + modelType, d.test.all)
# 1) correlate posterior of intended category with raw ratings by rated category (rating_for) -- this plot is difficult to read
p_corr1 = ggscatter(d.test.all %>%
filter(model == Sound) %>% # look at the posterior of the intended category
group_by(Rating.for, dataset, native_language, Word, Sound, Group, modelType) %>%
summarise(meanPosterior = mean(posterior),
meanRating = mean(rating_1.response)), x = "meanPosterior", y = "meanRating",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of intended category from IO", ylab = "raw rating") +
stat_cor(aes(color = Sound)) +
facet_grid(rating_for + modelType~native_language + Group)
# 1) correlate posterior of intended category with raw ratings by rated category (rating_for) -- this plot is difficult to read
p_corr1 = ggscatter(d.test.all %>%
filter(model == Sound) %>% # look at the posterior of the intended category
group_by(Rating.for, dataset, native_language, Word, Sound, Group, modelType) %>%
summarise(meanPosterior = mean(posterior),
meanRating = mean(Rating.Answer)), x = "meanPosterior", y = "meanRating",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of intended category from IO", ylab = "raw rating") +
stat_cor(aes(color = Sound)) +
facet_grid(rating_for + modelType~native_language + Group)
# 1) correlate posterior of intended category with raw ratings by rated category (rating_for) -- this plot is difficult to read
p_corr1 = ggscatter(d.test.all %>%
filter(model == Sound) %>% # look at the posterior of the intended category
group_by(Rating.for, dataset, native_language, Word, Sound, Group, modelType) %>%
summarise(meanPosterior = mean(posterior),
meanRating = mean(Rating.Answer)), x = "meanPosterior", y = "meanRating",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of intended category from IO", ylab = "raw rating") +
stat_cor(aes(color = Sound)) +
facet_grid(Rating.for + modelType~native_language + Group)
p_corr1
p.corr2 <- ggscatter(d.test.all %>%
filter(model == "d") %>%
group_by(dataset, native_language, Word, Sound, Group, modelType, consistence) %>%
summarise(meanPosterior_d = mean(posterior),
meanRating_d = mean(zrating.simplified_d)),
x = "meanPosterior_d", y = "meanRating_d",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of /d/ from IO", ylab = "mean rating \n/d/ goodness") +
stat_cor(aes(color = sound), label.x.npc = "middle", label.y.npc = "top") +
stat_cor() +
geom_smooth(color = "black", method = "lm") +
facet_grid(consistence~native_language, labeller = "label_both") +
ggtitle("Correlations between model predictions (posterior) and human ratings\nas a function of consistence")
p.corr2
p.corr2 <- ggscatter(d.test.all %>%
filter(model == "d") %>%
group_by(dataset, native_language, Word, Sound, Group, modelType, consistence) %>%
summarise(meanPosterior_d = mean(posterior),
meanRating_d = mean(zrating.simplified_d)),
x = "meanPosterior_d", y = "meanRating_d",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of /d/ from IO", ylab = "mean rating \n/d/ goodness") +
stat_cor(aes(color = Sound), label.x.npc = "middle", label.y.npc = "top") +
stat_cor() +
geom_smooth(color = "black", method = "lm") +
facet_grid(consistence~native_language, labeller = "label_both") +
ggtitle("Correlations between model predictions (posterior) and human ratings\nas a function of consistence")
p.corr2
p.corr3 <- ggscatter(d.test.all %>%
#  filter(!Word %in% c("Swede", "charred", "plod")) %>%
filter(model == "d") %>%
group_by(dataset, native_language, Word, Sound, Group, modelType, consistence) %>%
mutate(posterior_logodds = ifelse(posterior != 1, qlogis(posterior), 34.6573590)) %>%
summarise(meanLogOddsPosterior_d = mean(posterior_logodds),
meanRating_d = mean(zrating.simplified_d)),
x = "meanLogOddsPosterior_d", y = "meanRating_d",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "log odds of posterior of /d/ from IO", ylab = "mean rating \n/d/ goodness") +
stat_cor(aes(color = Sound), label.x.npc = "middle", label.y.npc = "top") +
stat_cor() +
geom_smooth(color = "black", method = "lm") +
facet_grid(consistence~native_language, labeller = "label_both") +
ggtitle("Correlations between model predictions (log odds) and human ratings\nas a function of consistence")
p.corr3
ggscatter(d.test.all %>%
filter(native_language == "English") %>%
filter(model == "d") %>%
group_by(Rating.for, Word, Sound, Group, modelType, consistence) %>%
summarise(meanPosterior_d = mean(posterior),
meanRating_d = mean(zrating.simplified_d)),
x = "meanPosterior_d", y = "meanRating_d",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of /d/ from IO", ylab = "mean rating \n/d/ goodness") +
stat_cor(aes(color = Sound), label.x.npc = "middle", label.y.npc = "top") +
#stat_cor() +
facet_grid(consistence~Rating.for, labeller= labeller(Rating.for = label_both)) +
ggtitle("Correlations separately for rating_d and rating_t tasks- English data")
ggscatter(d.test.all %>%
filter(native_language == "English") %>%
filter(model == "d") %>%
group_by(Rating.for, Word, Sound, Group, modelType, consistence) %>%
summarise(meanPosterior_d = mean(posterior),
meanRating_d = mean(zrating.simplified_d)),
x = "meanPosterior_d", y = "meanRating_d",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of /d/ from IO", ylab = "mean rating \n/d/ goodness") +
stat_cor(aes(color = Sound), label.x.npc = "middle", label.y.npc = "top") +
stat_cor() +
facet_grid(consistence~Rating.for, labeller= labeller(Rating.for = label_both)) +
ggtitle("Correlations separately for rating_d and rating_t tasks- English data")
ggscatter(d.test.all %>%
filter(native_language == "English") %>%
filter(model == "d") %>%
group_by(Rating.for, Word, Sound, Group, modelType, consistence) %>%
summarise(meanPosterior_d = mean(posterior),
meanRating_d = mean(zrating.simplified_d)),
x = "meanPosterior_d", y = "meanRating_d",
color = "Sound",
add = "reg.line", conf.int = TRUE,
palette = "jco",  cor.method = "pearson",
xlab = "posterior of /d/ from IO", ylab = "mean rating \n/d/ goodness") +
stat_cor(aes(color = Sound), label.x.npc = "middle", label.y.npc = "top") +
stat_cor() +
geom_smooth(color = "black", method = "lm") +
facet_grid(consistence~Rating.for, labeller= labeller(Rating.for = label_both)) +
ggtitle("Correlations separately for rating_d and rating_t tasks- English data")
d.test.all <- d.test.all %>%
mutate_if(is.character, as.factor)
d.test.all <-  within(d.test.all, {
native_language = factor(native_language, levels = c("Swedish", "English"))
modelType <- factor(modelType, levels = c("non-native", "native"))
consistence <- factor(consistence, levels = c("yes", "no"))
contrasts(native_language) <- contr.sum
contrasts(Group) <- contr.sum
contrasts(Sound) <- contr.sum
contrasts(modelType) <- contr.sum
contrasts(consistence) <- contr.sum
})
contrasts(d.test.all$native_language)
contrasts(d.test.all$Group)
contrasts(d.test.all$Sound)
contrasts(d.test.all$modelType)
contrasts(d.test.all$consistence)
prediction.lmer <- lmer(zrating.simplified_d ~ native_language*posterior.c*consistence*sound + (1|MinimalPairID) + (1|Participant),
data = d.test.all %>%
filter(model == "d")%>%
mutate(posterior.c = scale(posterior, center = T, scale = F)))
prediction.lmer <- lmer(zrating.simplified_d ~ native_language*posterior.c*consistence*Sound + (1|MinimalPairID) + (1|Participant),
data = d.test.all %>%
filter(model == "d")%>%
mutate(posterior.c = scale(posterior, center = T, scale = F)))
prediction.lmer <- lmer(zrating.simplified_d ~ native_language*posterior.c*consistence*Sound + (1|MinimalPairID) + (1|Participant),
data = d.test.all %>%
filter(model == "d")%>%
mutate(posterior.c = scale(posterior, center = T, scale = F)))
print(summary(prediction.lmer))
prediction.lmer2 <- lmer(zrating.simplified_d ~ native_language*posterior.c*consistence + (1|MinimalPairID) + (1 + Sound|Participant),
data = d.test.all %>%
filter(model == "d") %>%
mutate(posterior.c = scale(posterior, center = T, scale = F)))
prediction.lmer2 <- lmer(zrating.simplified_d ~ native_language*posterior.c*consistence + (1|MinimalPairID) + (1 + Sound|Participant),
data = d.test.all %>%
filter(model == "d") %>%
mutate(posterior.c = scale(posterior, center = T, scale = F)))
print(summary(prediction.lmer2))
prediction.lmer2.simple <- lmer(zrating.simplified_d ~ native_language/posterior.c*consistence + (1|MinimalPairID) + (1 + Sound|Participant),
data = d.test.all %>%
filter(model == "d") %>%
mutate(posterior.c = scale(posterior, center = T, scale = F)))
print(summary(prediction.lmer2.simple))
